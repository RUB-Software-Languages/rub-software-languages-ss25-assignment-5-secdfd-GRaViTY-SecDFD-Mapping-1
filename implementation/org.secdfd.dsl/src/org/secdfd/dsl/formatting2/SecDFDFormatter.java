/**
 * generated by Xtext 2.17.1
 */
package org.secdfd.dsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import org.secdfd.dsl.services.SecDFDGrammarAccess;
import org.secdfd.model.Asset;
import org.secdfd.model.EDFD;
import org.secdfd.model.Element;
import org.secdfd.model.TrustZone;
import org.secdfd.model.Value;

@SuppressWarnings("all")
public class SecDFDFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SecDFDGrammarAccess _secDFDGrammarAccess;

  protected void _format(final EDFD eDFD, @Extension final IFormattableDocument document) {
    EList<Asset> _asset = eDFD.getAsset();
    for (final Asset asset : _asset) {
      document.<Asset>format(asset);
    }
    EList<TrustZone> _trustzones = eDFD.getTrustzones();
    for (final TrustZone trustZone : _trustzones) {
      document.<TrustZone>format(trustZone);
    }
    EList<Element> _elements = eDFD.getElements();
    for (final Element element : _elements) {
      document.<Element>format(element);
    }
  }

  protected void _format(final Asset asset, @Extension final IFormattableDocument document) {
    EList<Value> _value = asset.getValue();
    for (final Value value : _value) {
      document.<Value>format(value);
    }
  }

  @XbaseGenerated
  public void format(final Object asset, final IFormattableDocument document) {
    if (asset instanceof XtextResource) {
      _format((XtextResource)asset, document);
      return;
    } else if (asset instanceof Asset) {
      _format((Asset)asset, document);
      return;
    } else if (asset instanceof EDFD) {
      _format((EDFD)asset, document);
      return;
    } else if (asset instanceof EObject) {
      _format((EObject)asset, document);
      return;
    } else if (asset == null) {
      _format((Void)null, document);
      return;
    } else if (asset != null) {
      _format(asset, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(asset, document).toString());
    }
  }
}
