EDFD JPMail[
	assets: 
		Asset EmailBodyAndHeader 
			type: Object
			values: [M I], [H C], [L Av]
			source: Alice
			targets: toMimeMessage,
		// src/pop3/JPMailMessage.java
		Asset MimePartBody 
			type: Object
			values: [M I], [H C], [L Av] 
			source: toMimeMessage
			targets: EncryptBody, Bob,
		// src/pop3/JPMailMessage.java
		Asset EncBody 
			type: Object
			values: [L Av]
			source: EncryptBody
			targets: decrypt,
		// src/pop3/JPMailMessage.java
		Asset Header 
			type: Object
			values: [M I], [M Av]
			source: toMimeMessage
			targets: SMTPServer, POP3Server, Bob,
		Asset BobPublicKey 
			type: Object
			values: [M I], [L Av]
			source: PolicyStore
			targets: EncryptBody,
		Asset BobPrivateKey 
			type: Object
			values: [M I], [H C], [M Av]
			source: KeyStore
			targets: decrypt,
		// src/policy/PolicyStore.java `Principal user'
		Asset Principal 
			type: Object
			values: [H I], [L Av]
			source: PolicyStore
			targets: toMimeMessage, decrypt
	elements:
		ExternalEntity Alice[
			assets: EmailBodyAndHeader
			//no incoming flows
			// init MailSenderCrypto with her policy, principal name, email address, user name, password
			// then she writes the emailbodyandheader
			// then she sends it, but first it undergoes reclassification in toMimeMessage
			outgoing flows: sendOutEmail [num: 1 assets: EmailBodyAndHeader targets: toMimeMessage]
			attacker: true
		],
		ExternalEntity Bob[
			assets: MimePartBody, Header
			incoming flows: "decrypt.provideHeaderAndBody"
			//no outgoing flows
		],
		// src/policy/PolicyStore.java
		DataStore PolicyStore[
			assets: Principal, BobPublicKey
			//no incoming flows
			outgoing flows: getPrincipal [num: 2 assets: Principal targets: toMimeMessage],
							hasPrincipal [num: 8 assets: Principal targets: decrypt],
							// src/policy/KeyPrincipal.java
							getPublicKey [num: 4 assets: BobPublicKey source: PolicyStore targets: EncryptBody]
		],
		DataStore KeyStore[
			assets: BobPrivateKey
			//no incoming flows
			// src/policy/KeyPrincipal.java
			outgoing flows: getPrivateKey [num: 9 assets: BobPrivateKey targets: decrypt]
		],
		// src/pop3/JPMailMessage.java
		// declassification of mail body and header
		Process toMimeMessage[
			responsibilities: [Principal Authoriser::], 
							  [EmailBodyAndHeader Splitter::MimePartBody,Header]
			assets: EmailBodyAndHeader, MimePartBody, Header, Principal
			incoming flows: "Alice.sendOutEmail", "PolicyStore.getPrincipal"
			// due to src/pop3/JPMailMessage.java in the toMimeMailMessage encryption happens
			outgoing flows: JPMailMessage [num: 3 assets: MimePartBody, Header targets: EncryptBody]
		],
		// encrypt actually happens at the same time as the declassification in the toMimeMessage....
		Process EncryptBody[
			responsibilities: [Principal Authoriser::], 
							  [MimePartBody,BobPublicKey EncryptOrHash::EncBody], 
							  [Header Forward::Header]
			assets: Principal, BobPublicKey, MimePartBody, EncBody
			incoming flows: "toMimeMessage.JPMailMessage", "PolicyStore.getPublicKey"
			// due to src/smtp/MeilSenderCrypto.java call smtp.sendMessage(mmm) line 820
			// we could also interpret it to link ti to: src/smtp/MailSenderCrypto.java line 490 call this.sendText(msg.toString());
			outgoing flows: sendMessage [num: 5 assets: EncBody, Header targets: SMTPServer]
		],
		ExternalEntity SMTPServer[
			//responsibilities: [EncBody,Header Forward:: EncBody,Header]
			assets: EncBody,Header
			incoming flows: "EncryptBody.sendMessage"
			// server side functionality not part of the code base
			outgoing flows: smtpForwardsEmail [num: 6 assets: EncBody, Header targets: POP3Server]
		],
		ExternalEntity POP3Server[
			//responsibilities: [EncBody,Header Copier:: EncBody,Header],
			//				  [EncBody,Header Store::]
			assets: EncBody,Header
			incoming flows: "SMTPServer.smtpForwardsEmail"
			// server side functionality not part of the code base
			outgoing flows: pop3ForwardsEmail [num: 7 assets: EncBody, Header targets: decrypt]
		],
		// due to src/pop3/MailReaderCrypto.java line 381
		Process decrypt[
			responsibilities: [Principal Authoriser::],
							  [EncBody, BobPrivateKey Decrypt:: MimePartBody],
							  [Header Forward::Header]
			assets: Principal, EncBody, BobPrivateKey, MimePartBody, Header
			incoming flows: "POP3Server.pop3ForwardsEmail", "PolicyStore.hasPrincipal", "KeyStore.getPrivateKey"
			outgoing flows: provideHeaderAndBody [num: 10 assets: MimePartBody, Header targets: Bob]
		]
]
