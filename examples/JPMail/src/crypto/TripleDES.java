package crypto;

import java.security.InvalidKeyException;
import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.*;

public class TripleDES // authority(AESprin)
{
	/**
	 * returns a newly generated key for use in AES encryption
	 * @return a AES Key
	 */
    static public Key getNewKey() throws NoSuchAlgorithmException, NullPointerException
    {
    		return KeyGenerator.getInstance("TripleDES").generateKey();
    }

    /** 
     * encrypts a String using a previously generated AES Key
     * @param key a previously generated AES Key (e.g. made with AES.getNewKey()
     * @param s the String to encrypt
     * @return a new Ciphertext object which contains both the key and the needed IV
     */
    static public Ciphertext encrypt(Key key, String s)
    //         throws (InvalidKeyException, IllegalBlockSizeException, NullPointerException,
    //		 BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException)
//	 where oneway(AESprin,P)
    {
		Ciphertext ciphertext = null;
	
		try {
		    Cipher des3Cipher_ = Cipher.getInstance("TripleDES/CBC/PKCS5Padding");
		    
		    des3Cipher_.init(Cipher.ENCRYPT_MODE,key);
		    
		    final byte[] input = s.getBytes();
		    final byte[] encrypted = des3Cipher_.doFinal(input);
		    
		    ciphertext = new Ciphertext(encrypted, des3Cipher_.getIV());
		}
		catch (Exception e) {}

	return ciphertext;
    }

    /** 
     * encrypts a String using a previously generated AES Key
     * @param key a previously generated AES Key (e.g. made with AES.getNewKey()
     * @param s the String to encrypt
     * @return a new Ciphertext object which contains both the key and the needed IV
     */
    static public Ciphertext encrypt(Key key, byte[] input)
    //         throws (InvalidKeyException, IllegalBlockSizeException, NullPointerException,
    //		 BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException)
//	 where oneway(AESprin,P)
    {
		Ciphertext ciphertext = null;
	
		try {
		    Cipher des3Cipher_ = Cipher.getInstance("TripleDES/CBC/PKCS5Padding");
		    
		    des3Cipher_.init(Cipher.ENCRYPT_MODE,key);
		    
		    final byte[] encrypted = des3Cipher_.doFinal(input);
		    
//		    ciphertext = new Ciphertext(new String(encrypted), new String(aesCipher_.getIV()));
		    ciphertext = new Ciphertext(encrypted, des3Cipher_.getIV());
		}
		catch (Exception e) {}

	return ciphertext;
    }

    /**
     * Decrypts a Ciphertext given a Key, using the AES algorithm
     * @param key the correct key for the given ciphertext
     * @param ciph must be a Ciphertext with the correct IV (e.g., generated by AES.encrypt)
     * @return the plaintext corresponding to the ciphertext
     */
    static public String decrypt(Key key, Ciphertext ciph) 
	 throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException, 
		 NoSuchPaddingException, InvalidAlgorithmParameterException, 
		 NoSuchAlgorithmException, NullPointerException
    {
		Cipher des3Cipher_ = Cipher.getInstance("TripleDES/CBC/PKCS5Padding");
	
		des3Cipher_.init(Cipher.DECRYPT_MODE,key,new IvParameterSpec(ciph.iv));//.getBytes()));
		    
		//byte[] encrypted = ciph.encText.getBytes();
		String output = new String(des3Cipher_.doFinal(ciph.encText));
	
		return output;
    }
}