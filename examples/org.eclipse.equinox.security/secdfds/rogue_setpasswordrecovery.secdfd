EDFD rogue_setpasswordrecovery [
	assets:
		//CryptoData encryptedValue = root.getCipher().encrypt(internalPasswordExt, data); PasswordManagement.java
		Asset encrypted_password
				type: Object
				values: [H C], [M I], [L Av]
				source: Encrypt_data
				targets: Put_value,
		// passwordExternal in SecurePreferences.java (PasswordExt passwordExt = getRoot().getPassword(moduleID, container, false);)
		Asset password_external 
				type: Object
				values: [H C], [H I]
				source: OS_User
				targets: Encrypt_data,
		// MD5 hashed mashed password, created from Challenge response, stored in PasswordExt Object; PasswordExt internalPasswordExt = new PasswordExt(new PBEKeySpec(internalPassword.toCharArray()), RECOVERY_PSEUDO_ID);
		Asset internal_mashed_password 
				type: Object
				values: [H C], [H I]
				source: Create_mash_password
				targets: Encrypt_data,
		// input param to setupRecovery (String[][] challengeResponse)
		// also fields: String PASSWORD_RECOVERY_KEY, String PASSWORD_RECOVERY_QUESTION? 
		Asset challenge_and_response
			type: String 
			values: [H C], [L I], [L Av]
			source: Plugin
			targets: Create_mash_password, Cache,
		//any String, maduleID -> pathName in public SecurePreferences node(String pathName) or ISecurePreferences node(String pathName) (in the wrapper)
		Asset path 
				type: String
				values: [H I]
				source: Plugin
				targets: Find_node, Cache,
		// node (in particular, recovery node) in ISecurePreferences or SecurePreferences or SecurePreferences Wrapper
		// also field: String PASSWORD_RECOVERY_NODE?
		Asset node 
				type: Object
				values: [H I]
				source: Find_node
				targets: Put_value, Remove
	elements:
		// Rogue plugin that is aware of the Path to Plugin, can 
		// delete the recovery node by passing null as challenge_and_response
		// and thereby causing a denial of service (if the external password of 
		// Plugin is lost, the user can not recover it
		ExternalEntity Rogue_Plugin[
			assets: path, challenge_and_response
			outgoing flows: rogue_setup [num: 11 assets: path, challenge_and_response source: Rogue_Plugin targets: Find_node]
			attacker: true
		],
		ExternalEntity OS_User[
			assets: password_external
			outgoing flows: user_external_password [num: 5  assets: password_external source: OS_User targets: Get_Password_External]
		],
		ExternalEntity Plugin[
			assets: path, challenge_and_response
			outgoing flows: setup_recovery [num: 1 assets: path, challenge_and_response source: Plugin targets: Find_node]
		],
		// values Map in SecurePreferences.java
		DataStore Cache[
			assets: challenge_and_response, path, node, encrypted_password
			incoming flows: "Remove.remove_recovery_node_and_key","Put_value.store_encrypted_pwd"	
		],
		Process Find_node[
			responsibilities: [path Forward:: path],
							  [node Forward:: node],
							  [challenge_and_response Forward:: challenge_and_response]
			assets: path, node, challenge_and_response
			incoming flows: "Plugin.setup_recovery", "Rogue_Plugin.rogue_setup"
			outgoing flows: store_password_and_questions [num: 8 assets: path, node, challenge_and_response source: Find_node targets: Put_value],
			create_mash_password [num: 4 assets: challenge_and_response source: Find_node targets: Create_mash_password],
			null_challenge_and_response [num: 2 assets: path, node source: Find_node targets: Remove]
			attacker: true
		] ,
		Process Remove[
			responsibilities: [path Forward:: path],
							  [node Forward:: node]
			assets: path, node
			incoming flows: "Find_node.null_challenge_and_response"
			outgoing flows: remove_recovery_node_and_key [num: 3 assets: path, node source: Remove targets: Cache]
		],
		//maps to public PasswordExt getPassword(String moduleID, IPreferencesContainer container, boolean encryption) or getModulePassword() in SecurePreferencesRoot.java
		Process Get_Password_External[
			responsibilities: [password_external Forward:: password_external]
			assets: password_external
			incoming flows: "OS_User.user_external_password"
			outgoing flows: fwd_password_external [num: 7 assets: password_external source:  Get_Password_External targets: Encrypt_data]
		],
		//maps to public encrypt or internalEncrypt() in JavaEncryption.java
		Process Encrypt_data [
			responsibilities: [password_external, internal_mashed_password EncryptOrHash:: encrypted_password]
			assets: password_external, internal_mashed_password, encrypted_password
			incoming flows: "Get_Password_External.fwd_password_external", "Create_mash_password.fwd_hashed_mash"						
			outgoing flows: store_encrypted_pass [num: 9 assets: encrypted_password source: Encrypt_data targets: Put_value]
		],
		Process Put_value [
			responsibilities: [encrypted_password Store:: encrypted_password],
							  [challenge_and_response Store:: challenge_and_response],
							  [path Forward:: path],
							  [node Forward:: node]
			assets: path, node, encrypted_password, challenge_and_response
			incoming flows: "Encrypt_data.store_encrypted_pass", "Find_node.store_password_and_questions"
			outgoing flows: store_encrypted_pwd [num: 10 assets: path, node, encrypted_password, challenge_and_response source: Put_value targets: Cache]
		],
		Process Create_mash_password [
			responsibilities: [challenge_and_response EncryptOrHash:: internal_mashed_password]
			assets: challenge_and_response, internal_mashed_password
			incoming flows: "Find_node.create_mash_password"
			outgoing flows: fwd_hashed_mash [num: 6 assets: internal_mashed_password source: Create_mash_password targets: Encrypt_data]
		]	
]